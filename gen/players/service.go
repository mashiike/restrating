// Code generated by goa v3.0.2, DO NOT EDIT.
//
// Players service
//
// Command:
// $ goa gen github.com/mashiike/restrating/design

package players

import (
	"context"

	playersviews "github.com/mashiike/restrating/gen/players/views"
)

// Player serves an indicator of strength using Rating
type Service interface {
	// Add new player and return its RRN(Rating Resource Name).
	CreatePlayer(context.Context, *CreatePlayerPayload) (res *RestratingRrn, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Players"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"create player"}

// CreatePlayerPayload is the payload type of the Players service create player
// method.
type CreatePlayerPayload struct {
	Name string
}

// RestratingRrn is the result type of the Players service create player method.
type RestratingRrn struct {
	// Rating Resource Name
	Rrn string
}

// NewRestratingRrn initializes result type RestratingRrn from viewed result
// type RestratingRrn.
func NewRestratingRrn(vres *playersviews.RestratingRrn) *RestratingRrn {
	var res *RestratingRrn
	switch vres.View {
	case "default", "":
		res = newRestratingRrn(vres.Projected)
	}
	return res
}

// NewViewedRestratingRrn initializes viewed result type RestratingRrn from
// result type RestratingRrn using the given view.
func NewViewedRestratingRrn(res *RestratingRrn, view string) *playersviews.RestratingRrn {
	var vres *playersviews.RestratingRrn
	switch view {
	case "default", "":
		p := newRestratingRrnView(res)
		vres = &playersviews.RestratingRrn{p, "default"}
	}
	return vres
}

// newRestratingRrn converts projected type RestratingRrn to service type
// RestratingRrn.
func newRestratingRrn(vres *playersviews.RestratingRrnView) *RestratingRrn {
	res := &RestratingRrn{}
	if vres.Rrn != nil {
		res.Rrn = *vres.Rrn
	}
	return res
}

// newRestratingRrnView projects result type RestratingRrn to projected type
// RestratingRrnView using the "default" view.
func newRestratingRrnView(res *RestratingRrn) *playersviews.RestratingRrnView {
	vres := &playersviews.RestratingRrnView{
		Rrn: &res.Rrn,
	}
	return vres
}
