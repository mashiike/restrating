// Code generated by goa v3.0.2, DO NOT EDIT.
//
// Players client HTTP transport
//
// Command:
// $ goa gen github.com/mashiike/restrating/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Players service endpoint HTTP clients.
type Client struct {
	// CreatePlayer Doer is the HTTP client used to make requests to the create
	// player endpoint.
	CreatePlayerDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the Players service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreatePlayerDoer:    doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CreatePlayer returns an endpoint that makes HTTP requests to the Players
// service create player server.
func (c *Client) CreatePlayer() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreatePlayerRequest(c.encoder)
		decodeResponse = DecodeCreatePlayerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreatePlayerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatePlayerDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("Players", "create player", err)
		}
		return decodeResponse(resp)
	}
}
