// Code generated by goa v3.0.2, DO NOT EDIT.
//
// Matches HTTP server types
//
// Command:
// $ goa gen github.com/mashiike/restrating/design

package server

import (
	matches "github.com/mashiike/restrating/gen/matches"
	matchesviews "github.com/mashiike/restrating/gen/matches/views"
	goa "goa.design/goa/v3/pkg"
)

// ApplyMatchRequestBody is the type of the "Matches" service "Apply match"
// endpoint HTTP request body.
type ApplyMatchRequestBody struct {
	Scores map[string]float64 `form:"scores,omitempty" json:"scores,omitempty" xml:"scores,omitempty"`
}

// ApplyMatchResponseBody is the type of the "Matches" service "Apply match"
// endpoint HTTP response body.
type ApplyMatchResponseBody struct {
	Participants []*RatingResourceResponseBody `form:"participants" json:"participants" xml:"participants"`
}

// RatingResourceResponseBody is used to define fields on response body types.
type RatingResourceResponseBody struct {
	// Rating Resource Name
	Rrn string `form:"rrn" json:"rrn" xml:"rrn"`
	// players strength
	Rating *RatingResponseBody `form:"rating" json:"rating" xml:"rating"`
}

// RatingResponseBody is used to define fields on response body types.
type RatingResponseBody struct {
	Strength float64 `form:"strength" json:"strength" xml:"strength"`
	Lower    float64 `form:"lower" json:"lower" xml:"lower"`
	Upper    float64 `form:"upper" json:"upper" xml:"upper"`
}

// NewApplyMatchResponseBody builds the HTTP response body from the result of
// the "Apply match" endpoint of the "Matches" service.
func NewApplyMatchResponseBody(res *matchesviews.RestratingMatchView) *ApplyMatchResponseBody {
	body := &ApplyMatchResponseBody{}
	if res.Participants != nil {
		body.Participants = make([]*RatingResourceResponseBody, len(res.Participants))
		for i, val := range res.Participants {
			body.Participants[i] = marshalMatchesviewsRatingResourceViewToRatingResourceResponseBody(val)
		}
	}
	return body
}

// NewApplyMatchPayload builds a Matches service Apply match endpoint payload.
func NewApplyMatchPayload(body *ApplyMatchRequestBody) *matches.ApplyMatchPayload {
	v := &matches.ApplyMatchPayload{}
	v.Scores = make(map[string]float64, len(body.Scores))
	for key, val := range body.Scores {
		tk := key
		tv := val
		v.Scores[tk] = tv
	}
	return v
}

// ValidateApplyMatchRequestBody runs the validations defined on Apply
// MatchRequestBody
func ValidateApplyMatchRequestBody(body *ApplyMatchRequestBody) (err error) {
	if body.Scores == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("scores", "body"))
	}
	return
}

// ValidateRatingResourceResponseBody runs the validations defined on
// RatingResourceResponseBody
func ValidateRatingResourceResponseBody(body *RatingResourceResponseBody) (err error) {
	if body.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rating", "body"))
	}
	return
}
