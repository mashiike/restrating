// Code generated by goa v3.0.2, DO NOT EDIT.
//
// Matches HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/mashiike/restrating/design

package server

import (
	"context"
	"io"
	"net/http"

	matchesviews "github.com/mashiike/restrating/gen/matches/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeApplyMatchResponse returns an encoder for responses returned by the
// Matches Apply match endpoint.
func EncodeApplyMatchResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*matchesviews.RestratingMatch)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewApplyMatchResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeApplyMatchRequest returns a decoder for requests sent to the Matches
// Apply match endpoint.
func DecodeApplyMatchRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ApplyMatchRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateApplyMatchRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewApplyMatchPayload(&body)

		return payload, nil
	}
}

// marshalMatchesviewsRatingResourceViewToRatingResourceResponseBody builds a
// value of type *RatingResourceResponseBody from a value of type
// *matchesviews.RatingResourceView.
func marshalMatchesviewsRatingResourceViewToRatingResourceResponseBody(v *matchesviews.RatingResourceView) *RatingResourceResponseBody {
	res := &RatingResourceResponseBody{
		Rrn: *v.Rrn,
	}
	if v.Rating != nil {
		res.Rating = marshalMatchesviewsRatingViewToRatingResponseBody(v.Rating)
	}

	return res
}

// marshalMatchesviewsRatingViewToRatingResponseBody builds a value of type
// *RatingResponseBody from a value of type *matchesviews.RatingView.
func marshalMatchesviewsRatingViewToRatingResponseBody(v *matchesviews.RatingView) *RatingResponseBody {
	res := &RatingResponseBody{
		Strength: *v.Strength,
		Lower:    *v.Lower,
		Upper:    *v.Upper,
	}

	return res
}
