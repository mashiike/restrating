// Code generated by goa v3.0.2, DO NOT EDIT.
//
// Matches HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/mashiike/restrating/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	matches "github.com/mashiike/restrating/gen/matches"
	matchesviews "github.com/mashiike/restrating/gen/matches/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildApplyMatchRequest instantiates a HTTP request object with method and
// path set to call the "Matches" service "Apply match" endpoint
func (c *Client) BuildApplyMatchRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ApplyMatchMatchesPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Matches", "Apply match", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeApplyMatchRequest returns an encoder for requests sent to the Matches
// Apply match server.
func EncodeApplyMatchRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*matches.ApplyMatchPayload)
		if !ok {
			return goahttp.ErrInvalidType("Matches", "Apply match", "*matches.ApplyMatchPayload", v)
		}
		body := NewApplyMatchRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Matches", "Apply match", err)
		}
		return nil
	}
}

// DecodeApplyMatchResponse returns a decoder for responses returned by the
// Matches Apply match endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeApplyMatchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ApplyMatchResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Matches", "Apply match", err)
			}
			p := NewApplyMatchRestratingMatchOK(&body)
			view := "default"
			vres := &matchesviews.RestratingMatch{p, view}
			if err = matchesviews.ValidateRestratingMatch(vres); err != nil {
				return nil, goahttp.ErrValidationError("Matches", "Apply match", err)
			}
			res := matches.NewRestratingMatch(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Matches", "Apply match", resp.StatusCode, string(body))
		}
	}
}

// unmarshalRatingResourceResponseBodyToMatchesviewsRatingResourceView builds a
// value of type *matchesviews.RatingResourceView from a value of type
// *RatingResourceResponseBody.
func unmarshalRatingResourceResponseBodyToMatchesviewsRatingResourceView(v *RatingResourceResponseBody) *matchesviews.RatingResourceView {
	res := &matchesviews.RatingResourceView{
		Rrn: v.Rrn,
	}
	res.Rating = unmarshalRatingResponseBodyToMatchesviewsRatingView(v.Rating)

	return res
}

// unmarshalRatingResponseBodyToMatchesviewsRatingView builds a value of type
// *matchesviews.RatingView from a value of type *RatingResponseBody.
func unmarshalRatingResponseBodyToMatchesviewsRatingView(v *RatingResponseBody) *matchesviews.RatingView {
	res := &matchesviews.RatingView{
		Strength: v.Strength,
		Lower:    v.Lower,
		Upper:    v.Upper,
	}

	return res
}
