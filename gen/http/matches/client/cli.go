// Code generated by goa v3.0.2, DO NOT EDIT.
//
// Matches HTTP client CLI support package
//
// Command:
// $ goa gen github.com/mashiike/restrating/design

package client

import (
	"encoding/json"
	"fmt"

	matches "github.com/mashiike/restrating/gen/matches"
	goa "goa.design/goa/v3/pkg"
)

// BuildApplyMatchPayload builds the payload for the Matches Apply match
// endpoint from CLI flags.
func BuildApplyMatchPayload(matchesApplyMatchBody string) (*matches.ApplyMatchPayload, error) {
	var err error
	var body ApplyMatchRequestBody
	{
		err = json.Unmarshal([]byte(matchesApplyMatchBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"scores\": {\n         \"rrn:player:XRQ85mtXnINISH25zfM0m5RlC6L2\": 1\n      }\n   }'")
		}
		if body.Scores == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("scores", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &matches.ApplyMatchPayload{}
	if body.Scores != nil {
		v.Scores = make(map[string]float64, len(body.Scores))
		for key, val := range body.Scores {
			tk := key
			tv := val
			v.Scores[tk] = tv
		}
	}
	return v, nil
}
