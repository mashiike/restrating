// Code generated by goa v3.0.2, DO NOT EDIT.
//
// restrating HTTP client CLI support package
//
// Command:
// $ goa gen github.com/mashiike/restrating/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	matchesc "github.com/mashiike/restrating/gen/http/matches/client"
	playersc "github.com/mashiike/restrating/gen/http/players/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `players create player
matches apply match
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` players create player --body '{
      "name": "XRQ85mtXnINISH25zfM0m5RlC6L2"
   }'` + "\n" +
		os.Args[0] + ` matches apply match --body '{
      "scores": {
         "rrn:player:XRQ85mtXnINISH25zfM0m5RlC6L2": 1
      }
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		playersFlags = flag.NewFlagSet("players", flag.ContinueOnError)

		playersCreatePlayerFlags    = flag.NewFlagSet("create player", flag.ExitOnError)
		playersCreatePlayerBodyFlag = playersCreatePlayerFlags.String("body", "REQUIRED", "")

		matchesFlags = flag.NewFlagSet("matches", flag.ContinueOnError)

		matchesApplyMatchFlags    = flag.NewFlagSet("apply match", flag.ExitOnError)
		matchesApplyMatchBodyFlag = matchesApplyMatchFlags.String("body", "REQUIRED", "")
	)
	playersFlags.Usage = playersUsage
	playersCreatePlayerFlags.Usage = playersCreatePlayerUsage

	matchesFlags.Usage = matchesUsage
	matchesApplyMatchFlags.Usage = matchesApplyMatchUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "players":
			svcf = playersFlags
		case "matches":
			svcf = matchesFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "players":
			switch epn {
			case "create player":
				epf = playersCreatePlayerFlags

			}

		case "matches":
			switch epn {
			case "apply match":
				epf = matchesApplyMatchFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "players":
			c := playersc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create player":
				endpoint = c.CreatePlayer()
				data, err = playersc.BuildCreatePlayerPayload(*playersCreatePlayerBodyFlag)
			}
		case "matches":
			c := matchesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "apply match":
				endpoint = c.ApplyMatch()
				data, err = matchesc.BuildApplyMatchPayload(*matchesApplyMatchBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// playersUsage displays the usage of the players command and its subcommands.
func playersUsage() {
	fmt.Fprintf(os.Stderr, `Player serves an indicator of strength using Rating
Usage:
    %s [globalflags] players COMMAND [flags]

COMMAND:
    create player: Add new player and return its RRN(Rating Resource Name).

Additional help:
    %s players COMMAND --help
`, os.Args[0], os.Args[0])
}
func playersCreatePlayerUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] players create player -body JSON

Add new player and return its RRN(Rating Resource Name).
    -body JSON: 

Example:
    `+os.Args[0]+` players create player --body '{
      "name": "XRQ85mtXnINISH25zfM0m5RlC6L2"
   }'
`, os.Args[0])
}

// matchesUsage displays the usage of the matches command and its subcommands.
func matchesUsage() {
	fmt.Fprintf(os.Stderr, `Matches serves a learning function of Rating from match results
Usage:
    %s [globalflags] matches COMMAND [flags]

COMMAND:
    apply match: Apply match and return RatingResources

Additional help:
    %s matches COMMAND --help
`, os.Args[0], os.Args[0])
}
func matchesApplyMatchUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] matches apply match -body JSON

Apply match and return RatingResources
    -body JSON: 

Example:
    `+os.Args[0]+` matches apply match --body '{
      "scores": {
         "rrn:player:XRQ85mtXnINISH25zfM0m5RlC6L2": 1
      }
   }'
`, os.Args[0])
}
