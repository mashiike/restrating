// Code generated by goa v3.0.2, DO NOT EDIT.
//
// Matches views
//
// Command:
// $ goa gen github.com/mashiike/restrating/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// RestratingMatch is the viewed result type that is projected based on a view.
type RestratingMatch struct {
	// Type to project
	Projected *RestratingMatchView
	// View to render
	View string
}

// RestratingMatchView is a type that runs validations on a projected type.
type RestratingMatchView struct {
	Participants []*RatingResourceView
}

// RatingResourceView is a type that runs validations on a projected type.
type RatingResourceView struct {
	// Rating Resource Name
	Rrn *string
	// players strength
	Rating *RatingView
}

// RatingView is a type that runs validations on a projected type.
type RatingView struct {
	Strength *float64
	Lower    *float64
	Upper    *float64
}

var (
	// RestratingMatchMap is a map of attribute names in result type
	// RestratingMatch indexed by view name.
	RestratingMatchMap = map[string][]string{
		"default": []string{
			"participants",
		},
	}
)

// ValidateRestratingMatch runs the validations defined on the viewed result
// type RestratingMatch.
func ValidateRestratingMatch(result *RestratingMatch) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateRestratingMatchView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateRestratingMatchView runs the validations defined on
// RestratingMatchView using the "default" view.
func ValidateRestratingMatchView(result *RestratingMatchView) (err error) {
	if result.Participants == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("participants", "result"))
	}
	return
}

// ValidateRatingResourceView runs the validations defined on
// RatingResourceView.
func ValidateRatingResourceView(result *RatingResourceView) (err error) {
	if result.Rrn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rrn", "result"))
	}
	if result.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rating", "result"))
	}
	if result.Rating != nil {
		if err2 := ValidateRatingView(result.Rating); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRatingView runs the validations defined on RatingView.
func ValidateRatingView(result *RatingView) (err error) {
	if result.Strength == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("strength", "result"))
	}
	if result.Lower == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lower", "result"))
	}
	if result.Upper == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("upper", "result"))
	}
	return
}
