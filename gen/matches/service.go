// Code generated by goa v3.0.2, DO NOT EDIT.
//
// Matches service
//
// Command:
// $ goa gen github.com/mashiike/restrating/design

package matches

import (
	"context"

	matchesviews "github.com/mashiike/restrating/gen/matches/views"
)

// Matches serves a learning function of Rating from match results
type Service interface {
	// Apply match and return RatingResources
	ApplyMatch(context.Context, *ApplyMatchPayload) (res *RestratingMatch, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Matches"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"Apply match"}

// ApplyMatchPayload is the payload type of the Matches service Apply match
// method.
type ApplyMatchPayload struct {
	Scores map[string]float64
}

// RestratingMatch is the result type of the Matches service Apply match method.
type RestratingMatch struct {
	Participants []*RatingResource
}

// RatingResource describes a strength information.
type RatingResource struct {
	// Rating Resource Name
	Rrn string
	// players strength
	Rating *Rating
}

type Rating struct {
	Strength float64
	Lower    float64
	Upper    float64
}

// NewRestratingMatch initializes result type RestratingMatch from viewed
// result type RestratingMatch.
func NewRestratingMatch(vres *matchesviews.RestratingMatch) *RestratingMatch {
	var res *RestratingMatch
	switch vres.View {
	case "default", "":
		res = newRestratingMatch(vres.Projected)
	}
	return res
}

// NewViewedRestratingMatch initializes viewed result type RestratingMatch from
// result type RestratingMatch using the given view.
func NewViewedRestratingMatch(res *RestratingMatch, view string) *matchesviews.RestratingMatch {
	var vres *matchesviews.RestratingMatch
	switch view {
	case "default", "":
		p := newRestratingMatchView(res)
		vres = &matchesviews.RestratingMatch{p, "default"}
	}
	return vres
}

// newRestratingMatch converts projected type RestratingMatch to service type
// RestratingMatch.
func newRestratingMatch(vres *matchesviews.RestratingMatchView) *RestratingMatch {
	res := &RestratingMatch{}
	if vres.Participants != nil {
		res.Participants = make([]*RatingResource, len(vres.Participants))
		for i, val := range vres.Participants {
			res.Participants[i] = transformMatchesviewsRatingResourceViewToRatingResource(val)
		}
	}
	return res
}

// newRestratingMatchView projects result type RestratingMatch to projected
// type RestratingMatchView using the "default" view.
func newRestratingMatchView(res *RestratingMatch) *matchesviews.RestratingMatchView {
	vres := &matchesviews.RestratingMatchView{}
	if res.Participants != nil {
		vres.Participants = make([]*matchesviews.RatingResourceView, len(res.Participants))
		for i, val := range res.Participants {
			vres.Participants[i] = transformRatingResourceToMatchesviewsRatingResourceView(val)
		}
	}
	return vres
}

// transformMatchesviewsRatingResourceViewToRatingResource builds a value of
// type *RatingResource from a value of type *matchesviews.RatingResourceView.
func transformMatchesviewsRatingResourceViewToRatingResource(v *matchesviews.RatingResourceView) *RatingResource {
	if v == nil {
		return nil
	}
	res := &RatingResource{
		Rrn: *v.Rrn,
	}
	if v.Rating != nil {
		res.Rating = transformMatchesviewsRatingViewToRating(v.Rating)
	}

	return res
}

// transformMatchesviewsRatingViewToRating builds a value of type *Rating from
// a value of type *matchesviews.RatingView.
func transformMatchesviewsRatingViewToRating(v *matchesviews.RatingView) *Rating {
	res := &Rating{
		Strength: *v.Strength,
		Lower:    *v.Lower,
		Upper:    *v.Upper,
	}

	return res
}

// transformRatingResourceToMatchesviewsRatingResourceView builds a value of
// type *matchesviews.RatingResourceView from a value of type *RatingResource.
func transformRatingResourceToMatchesviewsRatingResourceView(v *RatingResource) *matchesviews.RatingResourceView {
	res := &matchesviews.RatingResourceView{
		Rrn: &v.Rrn,
	}
	if v.Rating != nil {
		res.Rating = transformRatingToMatchesviewsRatingView(v.Rating)
	}

	return res
}

// transformRatingToMatchesviewsRatingView builds a value of type
// *matchesviews.RatingView from a value of type *Rating.
func transformRatingToMatchesviewsRatingView(v *Rating) *matchesviews.RatingView {
	res := &matchesviews.RatingView{
		Strength: &v.Strength,
		Lower:    &v.Lower,
		Upper:    &v.Upper,
	}

	return res
}
